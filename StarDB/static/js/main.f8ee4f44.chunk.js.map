{"version":3,"sources":["Swapi.js","Footer/Footer.js","Header/Header.js","actions/actionTypes.js","actions/actionRandomPlanet.js","RandomPlanet/RandomPlanet.js","Wellcome/Wellcome.js","ItemList/ItemList.js","actions/actionApp.js","PersonDetails/PersonDetails.js","PlanetDetails/PlanetDetails.js","StarshipDetails/StarshipDetails.js","AppBody/AppBody.js","App/App.js","reducers/displayRandomPlanet.js","reducers/appReducer.js","reducers/reducer.js","index.js"],"names":["Swapi","_apiBase","url","fetch","concat","this","res","ok","Error","json","id","getResource","Footer","react_default","a","createElement","className","Header","props","react_router_dom","to","onClick","cleanLoading","displayItems","UPDATE_RANDOM_PLANET","APP_UPDATE_ITEMS","APP_UPDATE_ITEM","CHANGE_ID","swapi","RandomPanet","state","loading","changePlanet","stateLoadingFalse","setState","updateRandomPlanet","_this2","_this$props","_this$props$planet","planet","name","diameter","rotation_period","population","src","alt","React","Component","connect","displayRandomPlanet","dispatch","Math","floor","random","getPlanet","then","type","Wellcome","ItemList","_this","item","items","map","index","arrIndex","key","displayItem","detailsChangeId","num","flag","length","new_index","match","join","new_arrIndex","getPeople","changeId","getStarship","appReducer","_ref","_ref$item","gender","height","mass","eye_color","undefined","climate","passengers","cost_in_credits","max_atmosphering_speed","AppBody","loadingItemList","src_ItemList_ItemList","react_router","path","expect","render","src_PersonDetails_PersonDetails","src_PlanetDetails_PlanetDetails","src_StarshipDetails_StarshipDetails","App","loadingWellcome","loadingItem","updateItems","url_ID","updateItem","_this$state","body","src_Wellcome_Wellcome","src_AppBody_AppBody","src_Header_Header","RandomPlanet","src_Footer_Footer","getAllPeople","displayItemsUpdateState","getAllPlanet","getAllStarship","appUpdateItems","displayItemUpdateState","appUpdateItem","initialState","arguments","actions","Object","objectSpread","results","reducer","combineReducers","store","createStore","applyMiddleware","reduxThunk","app","es","src_App_App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f8ee4f44.chunk.js","sourcesContent":["\r\n\r\nexport default class Swapi {\r\n\r\n    _apiBase = \"https://swapi.co/api\"\r\n\r\n    async getResource(url){\r\n        const res = await fetch(`${this._apiBase}${url}`);\r\n        if(!res.ok){\r\n            throw new Error(\"WARNING\");\r\n        }\r\n        return await res.json();\r\n    }\r\n\r\n    async getPlanet(id){\r\n        return await this.getResource(`/planets/${id}`)\r\n    }\r\n\r\n    async getPeople(id){\r\n            return await this.getResource(`/people/${id}`)\r\n        }\r\n\r\n    async getStarship(id){\r\n        return await this.getResource(`/starships/${id}`)\r\n    }\r\n\r\n    async getAllPeople(){\r\n        return await this.getResource('/people');\r\n    }\r\n\r\n    async getAllPlanet(){\r\n        return await this.getResource('/planets');\r\n    }\r\n\r\n    async getAllStarship(){\r\n        return await this.getResource('/starships');\r\n    }\r\n\r\n   \r\n\r\n    \r\n\r\n}\r\n","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className='Footer'>\r\n            Very Big Company (c)\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nconst Header = (props) =>{\r\n    return (\r\n        <header className='Header container'>\r\n            <div className='row'>\r\n                <div className=\"HeaderLogo \r\n                col-12\r\n                col-md-4\">\r\n                    <Link to=\"/StarDB\" onClick={ props.cleanLoading }>StarDB</Link>\r\n                </div>\r\n                <div className='HeaderLinks \r\n                col-12\r\n                col-md-8'>\r\n                    <Link to=\"/StarDB/people\" onClick={() => props.displayItems(\"PEOPLE\")}>People</Link>\r\n                    <Link to=\"/StarDB/planet\" onClick={() => props.displayItems(\"PLANET\")}>Planet</Link>   \r\n                    <Link to=\"/StarDB/starship\" onClick={() => props.displayItems(\"STARSHIP\")}>Starships</Link>       \r\n                </div> \r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","\r\nexport const UPDATE_RANDOM_PLANET = \"UPDATE_RANDOM_PLANET\";\r\nexport const APP_UPDATE_ITEMS = 'APP_UPDATE_ITEMS';\r\nexport const APP_UPDATE_ITEM = \"APP_UPDATE_ITEM\";\r\nexport const CHANGE_ID = 'CHANGE_ID'","import {UPDATE_RANDOM_PLANET} from './actionTypes'\r\nimport Swapi from '../Swapi'\r\n\r\nconst swapi = new Swapi();\r\n\r\nexport function updateRandomPlanet(){\r\n    return (dispatch) => {\r\n        const id = Math.floor(Math.random() * 20) + 2;\r\n        swapi\r\n            .getPlanet(id)\r\n            .then((planet) => {\r\n                    dispatch({ type: UPDATE_RANDOM_PLANET, planet, id })\r\n            })\r\n       \r\n    }\r\n} \r\n\r\n","import React from 'react'\r\nimport Swapi from './../Swapi'\r\nimport {connect} from 'react-redux'\r\nimport {updateRandomPlanet} from '../actions/actionRandomPlanet'\r\n\r\nclass RandomPanet extends React.Component {\r\n\r\n    //Обращение к API сервера \r\n    swapi = new Swapi();\r\n\r\n    //Загрузка страницы\r\n    state = {\r\n        loading: false\r\n    }\r\n\r\n    //Отображение начальной случайной планеты\r\n    componentDidMount(){\r\n        this.changePlanet();\r\n    }\r\n\r\n    componentWillReceiveProps(){\r\n        this.stateLoadingFalse();\r\n    }\r\n\r\n    changePlanet(){\r\n        this.setState({loading: true})\r\n        this.props.updateRandomPlanet()\r\n    }\r\n\r\n    stateLoadingFalse(){\r\n        this.setState({loading: false})\r\n    }\r\n\r\n    \r\n    \r\n    render(){\r\n        \r\n        const { planet: { name, diameter, rotation_period, population}, id } = this.props;\r\n\r\n        return (\r\n            <div className='RandomPlanet'>\r\n                <div>\r\n                    {\r\n                        this.state.loading \r\n                        ? \r\n                        <h3> Loading...  </h3> \r\n                        :\r\n                        <div className=\"RPbody container\">\r\n                            <div className='row'>\r\n                                <img src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} \r\n                                    alt=\"\" className='col-12 col-md-6'/>\r\n                                <ul className='row col-12 col-md-6'>\r\n                                    <li>Name - {name} </li>\r\n                                    <li>Diameter - {diameter} </li>\r\n                                    <li>Rotation Period - {rotation_period} </li>\r\n                                    <li>Population - {population} </li> \r\n                                    <button onClick={ () => this.changePlanet()} className=\"btn btn-primary\">Change Planet</button>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )  \r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        planet: state.displayRandomPlanet.planet, //массив с данными планеты\r\n        id: state.displayRandomPlanet.id //id планеты для отображения картинки\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{ //обновление планеты\r\n        updateRandomPlanet: () => dispatch(updateRandomPlanet() )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(RandomPanet)\r\n\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst Wellcome = (props) => {\r\n    return (\r\n        <div className=\"Wellcome container\">\r\n            <h3>Wellcome</h3>\r\n            <div className='row'>\r\n                <div className='col-12 WellcomeBody'>\r\n                    <Link to=\"/StarDB/people\" onClick={() => props.displayItems(\"PEOPLE\")}>\r\n                        People\r\n                        <img alt=\"\" src=\"https://starwars-visualguide.com/assets/img/categories/character.jpg\"/>\r\n                    </Link>\r\n                    <Link to=\"/StarDB/planet\" onClick={() => props.displayItems(\"PLANET\")}>\r\n                        Planet\r\n                        <img alt=\"\" src=\"https://starwars-visualguide.com/assets/img/categories/planets.jpg\"/>\r\n                    </Link>   \r\n                    <Link to=\"/StarDB/starship\" onClick={() => props.displayItems(\"STARSHIP\")}>\r\n                        Starships\r\n                        <img alt=\"\" src=\"https://starwars-visualguide.com/assets/img/categories/starships.jpg\"/>\r\n                    </Link>   \r\n                </div> \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Wellcome","import React, {Component} from 'react'\r\n\r\nclass ItemList extends Component{\r\n   \r\n    render(){ \r\n        const item = this.props.items.map((item, index) => {\r\n            const arrIndex = index;\r\n            return(\r\n                <li key={index}\r\n                onClick={() => this.props.displayItem(item.url, arrIndex) }>\r\n                    {item.name}\r\n                </li>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div className='col-12 col-md-6'>\r\n                <ul className=\"ItemList\">\r\n                    {item}\r\n                </ul>\r\n            </div>\r\n            \r\n        )  \r\n    }\r\n}\r\n\r\nexport default ItemList","import {APP_UPDATE_ITEMS, APP_UPDATE_ITEM, CHANGE_ID} from './actionTypes'\r\nimport Swapi from '../Swapi'\r\n\r\nconst swapi = new Swapi();\r\n\r\nexport function appUpdateItems(url){\r\n    return (dispatch) => {\r\n        if(url === 'PEOPLE'){\r\n            swapi.getAllPeople()\r\n            .then((items) => displayItemsUpdateState(items, url) )\r\n        }   \r\n        else if(url === 'PLANET'){\r\n            swapi.getAllPlanet()\r\n            .then((items) => displayItemsUpdateState(items, url) )\r\n        }   \r\n        else if(url === 'STARSHIP'){\r\n            swapi.getAllStarship()\r\n            .then((items) => displayItemsUpdateState(items, url) )\r\n        }\r\n        \r\n        const displayItemsUpdateState = (items, url) => {\r\n            dispatch({type: APP_UPDATE_ITEMS, updateItems: {items, url} })\r\n            return true\r\n        }\r\n    }      \r\n}\r\n\r\nexport function appUpdateItem(url_ID, flag, arrIndex){\r\n\r\n    return (dispatch) => {\r\n        const reg = /[0-9]/g;\r\n\r\n        const index = url_ID.match(reg).join(\"\");\r\n    \r\n        if(flag === \"PEOPLE\"){\r\n          swapi.getPeople(index)\r\n            .then((item) => displayItemUpdateState(item, index) )\r\n        }\r\n    \r\n        else if(flag === \"PLANET\"){\r\n          swapi.getPlanet(index)\r\n            .then((item) => displayItemUpdateState(item, index) )\r\n        }\r\n        \r\n        else if(flag === \"STARSHIP\"){\r\n          swapi.getStarship(index)\r\n            .then((item) => displayItemUpdateState(item, index) )\r\n        }\r\n\r\n        const displayItemUpdateState = (item, index) => {\r\n            dispatch({type: APP_UPDATE_ITEM, \r\n                      updateItem: {item, index, arrIndex} })\r\n        }\r\n    }\r\n}\r\n\r\nexport function detailsChangeId(num, items, arrIndex, flag){\r\n    return (dispatch) => {\r\n\r\n        if(arrIndex + num >= items.length){\r\n            arrIndex = -1\r\n        }\r\n        else if(arrIndex + num < 0 ){\r\n            arrIndex = items.length\r\n        }\r\n\r\n        const reg = /[0-9]/g;\r\n\r\n        const new_index = items[arrIndex + num].url.match(reg).join(\"\");\r\n\r\n        let new_arrIndex = arrIndex + num;\r\n\r\n        if( flag === \"PEOPLE\"){\r\n           swapi.getPeople(new_index)\r\n            .then((item) => {\r\n                dispatch({ type: CHANGE_ID, changeId: {item, new_index, new_arrIndex} })\r\n            }) \r\n        }\r\n        else if(flag === \"PLANET\"){\r\n            swapi.getPlanet(new_index)\r\n            .then((item) => {\r\n                dispatch({ type: CHANGE_ID, changeId: {item, new_index, new_arrIndex} })\r\n            }) \r\n        }\r\n        else if(flag === \"STARSHIP\"){\r\n            swapi.getStarship(new_index)\r\n            .then((item) => {\r\n                dispatch({ type: CHANGE_ID, changeId: {item, new_index, new_arrIndex} })\r\n            }) \r\n          }\r\n\r\n        \r\n    }\r\n}\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {detailsChangeId} from '../actions/actionApp'\r\n\r\nconst PersonDetails = ({item : {name, gender, height, mass, eye_color}, \r\n                        arrIndex, items, index, loading, changeId, flag}) =>{\r\n                            \r\n    if( gender === undefined){\r\n        return false\r\n    }\r\n\r\n    return (\r\n        <div className=\"PersonDetails Details\">\r\n            {\r\n                loading \r\n            ? \r\n                <h3>Loading...</h3>\r\n            :\r\n                <div>\r\n                    <ul className='PersDetails'>\r\n                        <h3>People</h3>\r\n                        <img src={`https://starwars-visualguide.com/assets/img/characters/${index}.jpg`} alt=\"\" />\r\n                        <li>Name - {name}</li>\r\n                        <li>Gender - {gender}</li>\r\n                        <li>Height - {height}</li>\r\n                        <li>Mass - {mass}</li>\r\n                        <li>Eye color - {eye_color}</li>\r\n                        <span>\r\n                            <button className=\"btn btn-primary\"\r\n                                onClick={ () => changeId(-1, items, arrIndex, flag)}\r\n                                >Prev\r\n                            </button>\r\n                            <button className='btn btn-danger'\r\n                                onClick={ () => changeId(1, items, arrIndex, flag)}\r\n                                >Next\r\n                            </button>  \r\n                        </span>\r\n                    </ul>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        item: state.appReducer.item,\r\n        items: state.appReducer.items,\r\n        index: state.appReducer.index,\r\n        arrIndex: state.appReducer.arrIndex,\r\n        flag: state.appReducer.flag\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        changeId: (num, items, arrIndex, flag) => dispatch( detailsChangeId(num, items, arrIndex, flag) )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PersonDetails)","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {detailsChangeId} from '../actions/actionApp'\r\n\r\nconst PlanetDetails = ({item: { name, diameter, population, rotation_period, climate}, \r\n                        items, arrIndex, index, loading, changeId, flag}) => {\r\n    if(diameter === undefined){\r\n        return false\r\n    }\r\n    return(\r\n        <ul className=\"PlanetDetails Details\">\r\n        {\r\n                loading \r\n            ? \r\n                <h3>Loading...</h3> \r\n            :\r\n                <div className='PlanDetails'>\r\n                    <h3>Planet</h3>\r\n                    <img src={`https://starwars-visualguide.com/assets/img/planets/${index}.jpg`} alt=\"\" />\r\n                    <li>Name - {name}</li>\r\n                    <li>Diameter - {diameter}</li>\r\n                    <li>Population - {population}</li>\r\n                    <li>Rotation Period - {rotation_period}</li>\r\n                    <li>Climate - {climate}</li>\r\n                    <span>\r\n                        <button className=\"btn btn-primary\"\r\n                            onClick={ () => changeId(-1, items, arrIndex, flag)}\r\n                            >Prev\r\n                        </button>\r\n                        <button className='btn btn-danger'\r\n                            onClick={ () => changeId(1, items, arrIndex, flag)}\r\n                            >Next\r\n                        </button>  \r\n                    </span>\r\n                </div>\r\n                \r\n        }\r\n            \r\n        </ul>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        item: state.appReducer.item,\r\n        items: state.appReducer.items,\r\n        index: state.appReducer.index,\r\n        arrIndex: state.appReducer.arrIndex,\r\n        flag: state.appReducer.flag\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        changeId: (num, items, arrIndex, flag) => dispatch( detailsChangeId(num, items, arrIndex, flag) )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlanetDetails)","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {detailsChangeId} from '../actions/actionApp'\r\n\r\nconst StarshipDetails = ({item : {name, passengers, length, cost_in_credits, max_atmosphering_speed},\r\n                         index, loading, flag, arrIndex, changeId, items}) => {\r\n    if( passengers === undefined){\r\n        return false\r\n    }\r\n\r\n    return(\r\n        <ul className=\"StarshipDetails Details\">\r\n        {\r\n                loading \r\n            ?\r\n                <h3>Loading...</h3>\r\n            :\r\n                <div className='StarshDetails'>\r\n                    <h3>Starship</h3>\r\n                    <img src={`https://starwars-visualguide.com/assets/img/starships/${index}.jpg`} alt=\"\" />\r\n                    <li>Name - {name}</li>\r\n                    <li>Passengers - {passengers}</li>\r\n                    <li>Length - {length}</li>\r\n                    <li>Cost In Credits - {cost_in_credits}</li>\r\n                    <li>Max Atmosphering Speed - {max_atmosphering_speed}</li>\r\n                    <span>\r\n                        <button className=\"btn btn-primary\"\r\n                            onClick={ () => changeId(-1, items, arrIndex, flag)}\r\n                            >Prev\r\n                        </button>\r\n                        <button className='btn btn-danger'\r\n                            onClick={ () => changeId(1, items, arrIndex, flag)}\r\n                            >Next\r\n                        </button>  \r\n                    </span>\r\n                </div>\r\n                \r\n        }\r\n        \r\n        </ul>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        item: state.appReducer.item,\r\n        items: state.appReducer.items,\r\n        index: state.appReducer.index,\r\n        arrIndex: state.appReducer.arrIndex,\r\n        flag: state.appReducer.flag\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        changeId: (num, items, arrIndex, flag) => dispatch( detailsChangeId(num, items, arrIndex, flag) )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StarshipDetails)","import React, {Component} from 'react'\r\nimport {Route} from 'react-router-dom'\r\nimport ItemList from './../ItemList/ItemList'\r\nimport PersonDetails from \"./../PersonDetails/PersonDetails\"\r\nimport PlanetDetails from '../PlanetDetails/PlanetDetails'\r\nimport StarshipDetails from '../StarshipDetails/StarshipDetails'\r\n\r\n\r\nclass AppBody extends Component{\r\n    render(){\r\n\r\n        const {items, displayItem, loading, loadingItemList} = this.props;\r\n        \r\n        return(\r\n            <div className=\"AppBody container\">\r\n              <div className='row'>\r\n                {\r\n                  loadingItemList \r\n                  ? <h3>Loading...</h3> \r\n                  : <ItemList items={items} \r\n                              displayItem={displayItem}/>\r\n                }\r\n            \r\n                <div className='col-12 col-md-6'>\r\n                  <Route  \r\n                    path=\"/StarDB/people\" expect\r\n                    render={ () => <PersonDetails loading={loading}/> } \r\n                  />\r\n                  <Route  \r\n                    path=\"/StarDB/planet\" expect\r\n                    render={ () => <PlanetDetails loading={loading}/> } \r\n                  />\r\n                  <Route  \r\n                    path=\"/StarDB/starship\" expect\r\n                    render={ () => <StarshipDetails loading={loading}/> } \r\n                  />\r\n                </div>\r\n              </div>\r\n          </div> \r\n        )\r\n    }\r\n}\r\n\r\nexport default AppBody","import React, { Component } from 'react';\nimport Swapi from '../Swapi'\nimport Footer from './../Footer/Footer'\nimport Header from './../Header/Header'\nimport RandomPlanet from './../RandomPlanet/RandomPlanet'\nimport Wellcome from '../Wellcome/Wellcome'\nimport AppBody from '../AppBody/AppBody'\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport {connect} from 'react-redux'\nimport PropTypes from 'prop-types'\nimport {appUpdateItem, appUpdateItems} from '../actions/actionApp'\n\n\nclass App extends Component {\n  \n  //Обращение к API сервера\n  swapi = new Swapi();\n\n  state = {\n    loadingWellcome: true,//загрузка главной страницы\n    loadingItem: true,//загрузка одиночного элемента\n    loadingItemList: false//загрузка списка элементов\n  }\n\n  cleanLoading = () => {\n    this.setState({\n      loadingWellcome: true,\n      loadingItemList: false,\n      loadingItem: true\n    })\n  }\n\n  componentWillReceiveProps(){\n    this.setState({\n      loadingItemList: false,\n      loadingItem: false})\n  }\n\n  //Получение списка\n  displayItems = (flag) =>{\n    this.setState({loadingWellcome: false, loadingItemList: true})\n    this.props.updateItems(flag);\n  }\n\n  //Получение элемента\n  displayItem = (url_ID, arrIndex) =>{\n    const flag = this.props.flag;\n    this.setState({loadingItem: true})\n    this.props.updateItem(url_ID, flag, arrIndex)\n  }\n\n  render() {\n    \n    const {items} = this.props;\n    const {loadingItem, loadingItemList, loadingWellcome} = this.state;\n    \n    const body = \n      loadingWellcome\n    ? \n      <Wellcome displayItems={this.displayItems}/> \n    :\n      <AppBody loadingItemList={loadingItemList}\n              items={items}\n              displayItem={this.displayItem}\n              loading={loadingItem}\n      />\n\n    return (\n      <Router>\n        <div className=\"App container\">\n          <div className=\"row\">\n            <div className='col-lg-12\n                            col-md-12\n                            col-sm-12\n                            col-12'>\n              <Header displayItems={this.displayItems}\n                      cleanLoading={this.cleanLoading}/>\n              <RandomPlanet />\n              {body}\n              <Footer />\n            </div>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = state =>{\n  return{\n    item: state.appReducer.item,//одиночный элемент(Planet,People,Starship)\n    items: state.appReducer.items,//массив элементов(Planet,People,Starship)\n    index: state.appReducer.index,//index(id) одиночного элемента\n    flag: state.appReducer.flag,//флаг массива элементов\n    arrIndex: state.appReducer.arrIndex //номер индекса в массиве\n  }\n}\n\nApp.propTypes = {\n  item: PropTypes.object,\n  items: PropTypes.array,\n  index: PropTypes.number,\n  flag: PropTypes.string,\n  arrIndex: PropTypes.number\n}\n\nconst mapDispatchToProps = dispatch =>{\n  return{\n    updateItems: (items, url) => dispatch( appUpdateItems(items, url) ),\n    updateItem: (item, index, arrIndex) => dispatch( appUpdateItem(item, index, arrIndex) )\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n\n","import {UPDATE_RANDOM_PLANET} from '../actions/actionTypes'\r\n\r\n\r\nconst initialState = {\r\n    planet: {},\r\n    id: 3\r\n}\r\n\r\nconst displayRandomPlanet = function(state = initialState, actions){\r\n\r\n    switch(actions.type){\r\n        case UPDATE_RANDOM_PLANET:\r\n            return{\r\n                planet: actions.planet,\r\n                id: actions.id\r\n            }\r\n\r\n        default: \r\n            return state    \r\n\r\n    }\r\n}\r\n\r\nexport default displayRandomPlanet","import {APP_UPDATE_ITEMS, APP_UPDATE_ITEM, CHANGE_ID} from '../actions/actionTypes'\r\n\r\nconst initialState = {\r\n    item: {},//одиночный элемент(Planet,People,Starship)\r\n    items: [{}],//массив элементов(Planet,People,Starship)\r\n    index: null,//index(id) одиночного элемента\r\n    flag: \"\",//флаг массива элементов\r\n    arrIndex: null\r\n}\r\n\r\nconst appReducer = (state = initialState, actions) => {\r\n\r\n    switch(actions.type){\r\n            \r\n        case APP_UPDATE_ITEMS:\r\n            return{\r\n                ...state,\r\n                items: actions.updateItems.items.results,\r\n                flag: actions.updateItems.url\r\n            }\r\n\r\n        case APP_UPDATE_ITEM:\r\n            return{\r\n                ...state,\r\n                item: actions.updateItem.item,\r\n                index: +actions.updateItem.index,\r\n                arrIndex: +actions.updateItem.arrIndex\r\n            }\r\n\r\n        case CHANGE_ID:\r\n\r\n            return{\r\n                ...state,\r\n                item: actions.changeId.item,\r\n                index: +actions.changeId.new_index,\r\n                arrIndex: +actions.changeId.new_arrIndex\r\n            }    \r\n\r\n        default: \r\n            return state    \r\n    }\r\n}\r\n\r\nexport default appReducer","import {combineReducers} from 'redux'\r\n\r\nimport displayRandomPlanet from './displayRandomPlanet'\r\nimport appReducer from './appReducer'\r\n\r\nconst reducer = combineReducers({\r\n    displayRandomPlanet,\r\n    appReducer\r\n})\r\n\r\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport './index.css'\nimport {Provider} from 'react-redux'\nimport {createStore, applyMiddleware} from 'redux'\nimport reduxThunk from 'redux-thunk'\nimport reducer from './reducers/reducer'\n\nconst store = createStore(reducer, applyMiddleware(\n    reduxThunk\n))\n\nconst app = <Provider store={store}>\n    <App />\n</Provider>\n\n\nReactDOM.render(app, document.getElementById('root'));\n\n"],"sourceRoot":""}